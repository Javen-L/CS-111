Total: 1485 samples
    1373  92.5%  92.5%     1485 100.0% start_routine
      34   2.3%  94.7%       34   2.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:200
      14   0.9%  95.7%       14   0.9% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1721
      14   0.9%  96.6%       58   3.9% SortedList_insert
      11   0.7%  97.4%       54   3.6% SortedList_lookup
       5   0.3%  97.7%        5   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:160
       5   0.3%  98.0%        5   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1720
       5   0.3%  98.4%        5   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1729
       4   0.3%  98.7%        4   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:205
       4   0.3%  98.9%        4   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1730
       3   0.2%  99.1%        3   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:130
       3   0.2%  99.3%        3   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:203
       3   0.2%  99.5%        3   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:204
       3   0.2%  99.7%        3   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1714
       2   0.1%  99.9%        2   0.1% _init
       1   0.1%  99.9%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:134
       1   0.1% 100.0%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:165
       0   0.0% 100.0%     1485 100.0% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:111
       0   0.0% 100.0%     1485 100.0% start_thread
ROUTINE ====================== start_routine in /u/ce/ugrad/dhruv/Desktop/CS111/Project2B/lab2_list.c
  1373   1485 Total samples (flat / cumulative)
     .      .  267:     temp[i] = chars[rand() % (sizeof(chars) - 1)];
     .      .  268:   }
     .      .  269:   return temp;
     .      .  270: }
     .      .  271: 
---
     .      .  272: void *start_routine(void *arg) {
     .      .  273:   long long wait = 0;
     .      .  274:   struct timespec start, end;
     .      .  275:   int first = *((int *) arg);
     .      .  276: 
     .      .  277:   for(int i = first; i < first + num_iterations; i++) { //insert elements
     .      .  278:     int hash = generate_hash(element[i].key);
     .      .  279:     switch(sync_val) {
     .      .  280:     case 'm':
     .      .  281:       clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  282:       pthread_mutex_lock(&m_lock[hash]);
     .      .  283:       clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  284:       wait += 1000000000 * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
     .      .  285:       break;
     .      .  286:     case 's':
     .      .  287:       clock_gettime(CLOCK_MONOTONIC, &start);
   857    857  288:       while(__sync_lock_test_and_set(&lock[hash], 1));
     .      .  289:       clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  290:       wait += 1000000000 * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
     .      .  291:       break;
     .      .  292:     }
     .     58  293:     SortedList_insert(&list[hash], &element[i]);
     .      .  294:     switch(sync_val) {
     .      .  295:     case 'm':
     .      .  296:       pthread_mutex_unlock(&m_lock[hash]);
     .      .  297:       break;
     .      .  298:     case 's':
     .      .  299:       __sync_lock_release(&lock[hash]);
     .      .  300:       break;
     .      .  301:     }
     .      .  302:   }
     .      .  303: 
     .      .  304:   int list_len = 0; //check list lengths
     .      .  305:   for(int i = 0; i < num_lists; i++) {
     .      .  306:     switch(sync_val) {
     .      .  307:     case 'm':
     .      .  308:       clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  309:       pthread_mutex_lock(&m_lock[i]);
     .      .  310:       clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  311:       wait += 1000000000 * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
     .      .  312:       break;
     .      .  313:     case 's':
     .      .  314:       clock_gettime(CLOCK_MONOTONIC, &start);
     1      1  315:       while(__sync_lock_test_and_set(&lock[i], 1));
     .      .  316:       clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  317:       wait += 1000000000 * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
     .      .  318:       break;
     .      .  319:     }
     .      .  320:     list_len += SortedList_length(&list[i]);
     .      .  321:     switch(sync_val) {
     .      .  322:     case 'm':
     .      .  323:       pthread_mutex_unlock(&m_lock[i]);
     .      .  324:       break;
     .      .  325:     case 's':
     .      .  326:       __sync_lock_release(&lock[i]);
     .      .  327:       break;
     .      .  328:     }
     .      .  329:   }
     .      .  330:   if(list_len < num_iterations) {
     .      .  331:     handle_error("Error inserting elements in list", 2);
     .      .  332:   }
     .      .  333: 
     .      .  334:   for(int i = first; i < first + num_iterations; i++) { //find and delete elements
     .      .  335:     int hash = generate_hash(element[i].key);
     .      .  336:     switch(sync_val) {
     .      .  337:     case 'm':
     .      .  338:       clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  339:       pthread_mutex_lock(&m_lock[hash]);
     .      .  340:       clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  341:       wait += 1000000000 * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
     .      .  342:       break;
     .      .  343:     case 's':
     .      .  344:       clock_gettime(CLOCK_MONOTONIC, &start);
   515    515  345:       while(__sync_lock_test_and_set(&lock[hash], 1));
     .      .  346:       clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  347:       wait += 1000000000 * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
     .      .  348:       break;
     .      .  349:     }
     .     54  350:     SortedListElement_t *temp = SortedList_lookup(&list[hash], element[i].key);
     .      .  351:     if(temp == NULL) {
     .      .  352:       handle_error("Error with SortedList_lookup()", 2);
     .      .  353:     }
     .      .  354:     ret = SortedList_delete(temp);
     .      .  355:     if(ret != 0) {
     .      .  356:       handle_error("Error with SortedList_delete()", 2);
     .      .  357:     }
     .      .  358:     switch(sync_val) {
     .      .  359:     case 'm':
     .      .  360:       pthread_mutex_unlock(&m_lock[hash]);
     .      .  361:       break;
     .      .  362:     case 's':
     .      .  363:       __sync_lock_release(&lock[hash]);
     .      .  364:       break;
     .      .  365:     }
     .      .  366:   }
     .      .  367: 
     .      .  368:   return (void *) wait;
     .      .  369: }
---
     .      .  370: 
     .      .  371: void handle_free() {
     .      .  372:   free(list);
     .      .  373:   free(element);
     .      .  374:   free(thread);
ROUTINE ====================== start_routine in /u/ce/ugrad/dhruv/Desktop/CS111/Project2B/lab2_list.c
  1373   1485 Total samples (flat / cumulative)
     .      .  267:     temp[i] = chars[rand() % (sizeof(chars) - 1)];
     .      .  268:   }
     .      .  269:   return temp;
     .      .  270: }
     .      .  271: 
---
     .      .  272: void *start_routine(void *arg) {
     .      .  273:   long long wait = 0;
     .      .  274:   struct timespec start, end;
     .      .  275:   int first = *((int *) arg);
     .      .  276: 
     .      .  277:   for(int i = first; i < first + num_iterations; i++) { //insert elements
     .      .  278:     int hash = generate_hash(element[i].key);
     .      .  279:     switch(sync_val) {
     .      .  280:     case 'm':
     .      .  281:       clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  282:       pthread_mutex_lock(&m_lock[hash]);
     .      .  283:       clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  284:       wait += 1000000000 * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
     .      .  285:       break;
     .      .  286:     case 's':
     .      .  287:       clock_gettime(CLOCK_MONOTONIC, &start);
   857    857  288:       while(__sync_lock_test_and_set(&lock[hash], 1));
     .      .  289:       clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  290:       wait += 1000000000 * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
     .      .  291:       break;
     .      .  292:     }
     .     58  293:     SortedList_insert(&list[hash], &element[i]);
     .      .  294:     switch(sync_val) {
     .      .  295:     case 'm':
     .      .  296:       pthread_mutex_unlock(&m_lock[hash]);
     .      .  297:       break;
     .      .  298:     case 's':
     .      .  299:       __sync_lock_release(&lock[hash]);
     .      .  300:       break;
     .      .  301:     }
     .      .  302:   }
     .      .  303: 
     .      .  304:   int list_len = 0; //check list lengths
     .      .  305:   for(int i = 0; i < num_lists; i++) {
     .      .  306:     switch(sync_val) {
     .      .  307:     case 'm':
     .      .  308:       clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  309:       pthread_mutex_lock(&m_lock[i]);
     .      .  310:       clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  311:       wait += 1000000000 * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
     .      .  312:       break;
     .      .  313:     case 's':
     .      .  314:       clock_gettime(CLOCK_MONOTONIC, &start);
     1      1  315:       while(__sync_lock_test_and_set(&lock[i], 1));
     .      .  316:       clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  317:       wait += 1000000000 * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
     .      .  318:       break;
     .      .  319:     }
     .      .  320:     list_len += SortedList_length(&list[i]);
     .      .  321:     switch(sync_val) {
     .      .  322:     case 'm':
     .      .  323:       pthread_mutex_unlock(&m_lock[i]);
     .      .  324:       break;
     .      .  325:     case 's':
     .      .  326:       __sync_lock_release(&lock[i]);
     .      .  327:       break;
     .      .  328:     }
     .      .  329:   }
     .      .  330:   if(list_len < num_iterations) {
     .      .  331:     handle_error("Error inserting elements in list", 2);
     .      .  332:   }
     .      .  333: 
     .      .  334:   for(int i = first; i < first + num_iterations; i++) { //find and delete elements
     .      .  335:     int hash = generate_hash(element[i].key);
     .      .  336:     switch(sync_val) {
     .      .  337:     case 'm':
     .      .  338:       clock_gettime(CLOCK_MONOTONIC, &start);
     .      .  339:       pthread_mutex_lock(&m_lock[hash]);
     .      .  340:       clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  341:       wait += 1000000000 * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
     .      .  342:       break;
     .      .  343:     case 's':
     .      .  344:       clock_gettime(CLOCK_MONOTONIC, &start);
   515    515  345:       while(__sync_lock_test_and_set(&lock[hash], 1));
     .      .  346:       clock_gettime(CLOCK_MONOTONIC, &end);
     .      .  347:       wait += 1000000000 * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
     .      .  348:       break;
     .      .  349:     }
     .     54  350:     SortedListElement_t *temp = SortedList_lookup(&list[hash], element[i].key);
     .      .  351:     if(temp == NULL) {
     .      .  352:       handle_error("Error with SortedList_lookup()", 2);
     .      .  353:     }
     .      .  354:     ret = SortedList_delete(temp);
     .      .  355:     if(ret != 0) {
     .      .  356:       handle_error("Error with SortedList_delete()", 2);
     .      .  357:     }
     .      .  358:     switch(sync_val) {
     .      .  359:     case 'm':
     .      .  360:       pthread_mutex_unlock(&m_lock[hash]);
     .      .  361:       break;
     .      .  362:     case 's':
     .      .  363:       __sync_lock_release(&lock[hash]);
     .      .  364:       break;
     .      .  365:     }
     .      .  366:   }
     .      .  367: 
     .      .  368:   return (void *) wait;
     .      .  369: }
---
     .      .  370: 
     .      .  371: void handle_free() {
     .      .  372:   free(list);
     .      .  373:   free(element);
     .      .  374:   free(thread);
