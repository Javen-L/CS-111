//NAME: Dhruv Singhania
//EMAIL: singhania_dhruv@yahoo.com
//ID: 105125631

#include <termios.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <poll.h>
#include <fcntl.h>
#include <getopt.h>
#include <string.h>
#include <sys/types.h>
#include <errno.h>
#include <signal.h>
#include <sys/wait.h>

struct termios termios_get; //stores original terminal settings
char program_name[256]; //name of program in --shell option
int pipefd1[2], pipefd2[2]; //arrays to hold pipe file descriptors
int fork_ret;
int exit_flag = 0;

void set_terminal(); //sets terminal to non-canonical input mode with no echo
void restore_terminal(); //restores terminal to original settings
void read_write(); //read input and write to output
void child_process(); //function for child process
void parent_process(); //function for parent process
void terminal_input();
void shell_input();
void handle_sigpipe();

int main(int argc, char *argv[]) {
  int c; //holds value of getopt
  int shell_flag = 0; //flag set by --shell
  while(1) {
    static struct option long_options[] = //holds key for options
      {
       {"shell", required_argument, 0, 's'},
       {0, 0, 0, 0}
      };
    int option_index = 0; //stores option index for getopt_long
    c = getopt_long(argc, argv, "i:o:", long_options, &option_index);
    if(c == -1) { //breaks when there are no more options
      break;
    }
    switch(c) {
    case 's': //--shell case
      shell_flag = 1;
      strcpy(program_name, optarg);
      break;
    case '?': //unrecognized option
      fprintf(stderr, "usage: lab1a [--shell='program']");
      exit(1);
      break;
    default:
      abort();
    }
  }
  
  set_terminal(); 
  if(shell_flag == 0) { //--shell option not used
    read_write();
  }

  int ret;
  ret = pipe(pipefd1); //create two pipes, one for each direction
  pipe(pipefd2);
  if(ret < 0) {
    fprintf(stderr, "Error with pipe(): %s\n", strerror(errno));
    exit(1);
  }
  signal(SIGPIPE, handle_sigpipe);
  fork_ret = fork(); //holds id of process
  if(fork_ret < 0) {
    fprintf(stderr, "Error with fork(): %s\n", strerror(errno));
    exit(1);
  }
  else if(fork_ret == 0) { //child process
    child_process();
  }
  else {
    parent_process(); //parent process
  }
}

void set_terminal() {
  struct termios termios_set; //temp that stores new terminal settings
  int ret;
  ret = tcgetattr(0, &termios_get);
  if(ret < 0) {
    fprintf(stderr, "Error with tcgetattr(): %s\n", strerror(errno));
    exit(1);
  }
  termios_set = termios_get;
  termios_set.c_iflag = ISTRIP; //terminal changes outlined in project
  termios_set.c_oflag = 0;
  termios_set.c_lflag = 0;
  termios_set.c_cc[VMIN] = 1;
  termios_set.c_cc[VTIME] = 0;
  ret = tcsetattr(0, TCSANOW, &termios_set);
  if(ret < 0) {
    fprintf(stderr, "Error with tcsetattr(): %s\n", strerror(errno));
    exit(1);
  }
  atexit(restore_terminal); //call restore_terminal before every exit
}

void restore_terminal() {
  tcsetattr(0, TCSANOW, &termios_get);
}

void read_write() {
  while(1) {
    char buf[16], temp[2]; //to help with read write
    int bytes_read; //stores num of bytes read
    bytes_read = read(0, buf, 16);
    if(bytes_read < 0) {
      fprintf(stderr, "Error with read(): %s\n", strerror(errno));
      exit(1);
    }
    for(int i = 0; i < bytes_read; i++) {
      switch(buf[i]) {
      case 4: //^D case
	temp[0] = '^';
	temp[1] = 'D';
	write(1, temp, 2);
	exit(0);
      case 10: //<lf> case
      case 13: //<cr> case
	temp[0] = 13;
	temp[1] = 10;
	write(1, temp, 2);
	break;
      default: //default case
	write(1, buf, 1);
	break;
      }
    }
  }
  exit(0);
}

void child_process() {
    close(pipefd1[1]); //sets pipe
    close(pipefd2[0]);
    dup2(pipefd1[0], 0);
    dup2(pipefd2[1], 1);
    dup2(pipefd2[1], 2);
    close(pipefd1[0]);
    close(pipefd2[1]);
    char *myargs[2]; //to pass to execvp
    myargs[0] = strdup(program_name);
    myargs[1] = NULL;
    execvp(myargs[0], myargs); //executes desired program
    fprintf(stderr, "Error with exec(): %s\n", strerror(errno));
    exit(1);
}

void parent_process() {
    close(pipefd1[0]); //sets pipe
    close(pipefd2[1]);
    struct pollfd fds[] =
      {
       {0, POLLIN, 0},
       {pipefd2[0], POLLIN, 0}
      };
    int ret;
    while(!exit_flag) {
      ret = poll(fds, 2, 0);
      if(ret < 0) {
	fprintf(stderr, "Error with poll(): %s\n", strerror(errno));
	exit(1);
      }
      if(fds[0].revents & POLLIN) {
	terminal_input();
      }
      if(fds[1].revents & POLLIN) {
	shell_input();
      }
      else if(fds[1].revents & POLLERR || fds[1].revents & POLLHUP) {
	exit_flag = 1;
      }
    }
    
    //dup2(pipefd1[1], 1);
    //dup2(pipefd1[1], 2);
    //dup2(pipefd2[0], 0);
    close(pipefd1[1]);
    close(pipefd2[0]);
    int status;
    ret = waitpid(fork_ret, &status, 0);
    if(ret < 0) {
      fprintf(stderr, "Error with waitpid(): %s\n", strerror(errno));
      exit(1);
    }
    fprintf(stderr, "SHELL EXIT SIGNAL=%d STATUS=%d\n", WIFSIGNALED(status), WEXITSTATUS(status));

    exit(0);
}

void terminal_input() {
  char buf[16], temp[2];
  int bytes_read = read(0, buf, 16);
  for(int i = 0; i < bytes_read; i++) {
    switch(buf[i]) {
      case 3: //^C case
        temp[0] = '^';
	temp[1] = 'C';
	write(1, temp, 2);
	kill(fork_ret, SIGINT);
	break;
      case 4: //^D case
	temp[0] = '^';
	temp[1] = 'D';
	write(1, temp, 2);
	exit_flag = 1;
	break;
      case 10: //<lf> case
      case 13: //<cr> case
	temp[0] = 13;
	temp[1] = 10;
	write(1, temp, 2);
	write(pipefd1[1], temp + 1, 1);
	break;
      default: //default case
	write(1, buf, 1);
	write(pipefd1[1], buf, 1);
	break;
    }
  }
}

void shell_input() {
  char buf[16], temp[2];
  int bytes_read = read(pipefd2[0], buf, 16);
  for(int i = 0; i < bytes_read; i++) {
    switch(buf[i]) {
    case 4: //^D case
      temp[0] = '^';
      temp[1] = 'D';
      write(1, temp, 2);
      exit_flag = 1;
      break;
    case 10: //<lf> case
      temp[0] = 13;
      temp[1] = 10;
      write(1, temp, 2);
      break;
    default: //default case
      write(1, buf, 1);
      break;
    }
  }
}

void handle_sigpipe() {
  fprintf(stderr, "SIGPIPE recieved\n");
  exit(0);
}