NAME: Dhruv Singhania
EMAIL: singhania_dhruv@yahoo.com
ID: 105125631

CS 111 Project 2A

Included files:
	 lab2_add.c - C program that implements and tests shared variable add function and produces specified output statistics
	 SortedList.h - header file describing interfaces for linked list operations
	 SortedList.c - C program that implements insert, delete, lookup, and length methods for sorted doubly linked list
	 lab2_list.c - C program that implements specified command line options and produces specified output statistics
	 lab2_add.csv - CSV file that contains results for Part-1 tests
	 lab2_list.csv - CSV file that contains results for Part-2 tests
	 Makefile - Makefile to build deliverable programs, output, graphs and tarball
	 lab2_add-1.png - threads and iterations required to generate a failure with and without yields
	 lab2_add-2.png - average time per operation with and without yields
	 lab2_add-3.png - average time per single threaded operation vs. the number of iterations
	 lab2_add-4.png - threads and iterations that can run successfully with yields under each of the three synchronization methods
	 lab2_add-5.png - average time per multi-threaded operation vs. the number of threads, for all four versions of the add function
	 lab2_list-1.png - average time per single threaded unprotected operation vs. number of iterations illustrating the correction of the per-operation cost for the list length
	 lab2_list-2.png - threads and iterations required to generate a failure with and without yield
	 lab2_list-3.png - iterations that can run protecte) without failure
	 lab2_list-4.png - corrected average time per operation for unprotected, mutex, and spin-lock vs. number of threads

References:
	https://www.cs.rutgers.edu/~pxk/416/notes/c-tutorials/gettime.html
	https://computing.llnl.gov/tutorials/pthreads/#MutexLocking
	https://gcc.gnu.org/onlinedocs/gcc-4.4.3/gcc/Atomic-Builtins.html

Question 2.1.1:
	 It takes many iterations before errors are seen because with a small amount of iterations, the threads can finish their jobs within their time slice, preventing any race conditions to occur, which also seldom fails.

Question 2.1.2:
	 --yield runs are slower because --yield places the current thread to the back of the queue, causing the OS to make a context switch to another thread, which is slow.
	 It is not possible to get per-operation timings with the --yield option because we don't know the time it takes for context switches.

Question 2.1.3:
	 The average cost per operation drops with increasing iterations because it compensates for the overhead of creating a new thread.
	 We know how many iterations to run because the second plot shows where this cost per iteration stabilizes.

Wdd